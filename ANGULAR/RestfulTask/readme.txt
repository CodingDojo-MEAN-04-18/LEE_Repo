Restful Tasks

Objectives:
    Include a service in your existing Angular app

Building off  your Restful Task API assignment, add a service. Add functions to your service that 
make AJAX requests to all the get routes you made for the Restful Task API. 
This includes retrieving all tasks and retrieving a task by ID. 
Depending on how you wrote your API, it may also include deleting a task by ID. 
For now, have the service print the data it receives to the console. To complete this assignment, 
the service will need to be created, registered, and injected into the root component. 
Also, you'll need HttpClient in order to communicate with your server.

As a reminder, in the previous lesson we covered how to make a request to the server and subscribe 
to the observable that is returned.



--
Restful Task API
Using your new knowledge of 'Restful Routing', create an application with endpoints (routing rules), 
which offer CRUD operations for 'tasks'. 
We should be able to use this API for the following commands:

Retrieve all Tasks
Retrieve a Task by ID
Create a Task
Update a Task by ID
Delete a Task by ID

The tasks should be responded in a json format. 
Consider the tasks being objects with the following properties:

_id: (string) (default id generated by mongoDB)
title: (string)
description: (string, default to empty string)
completed: (boolean, default to: false)
created_at: (date, default to current date)
updated_at: (date, default to current date)

Once your API is complete and your routing rules are in place, and follow the 'restful routing' 
standards, use the 'postman' browser extension to test your routing rules. 

'Postman' is a simple (and quite popular) browser extension that allows you to prepare your own 
HTTP requests, serving as an ideal tool for testing your server's API.
Using Postman:

1.  When you open Postman, click on 'Collection'  to create a new set of routes for a particular 
    project. For this assignment, name your collection 'Task API'.